---
// About:  CesiumJS 3D Flight Replay

type Props = {
  flight: Flight;
};

const { flight } = Astro.props;

import type { Flight } from '@libs/flying';
import 'cesium/Build/Cesium/Widgets/widgets.css';
---

<div
  id="cesiumContainer"
  igc-url={flight.igcFile?.filePathUrl}
  class="flex h-full w-full"
>
</div>

<script>
  import axios from 'axios';

  import * as Cesium from 'cesium';
  import IGCParser from 'igc-parser';
  import { addIgcToViewer } from './pilotTrack';
  import { addWaypointsToViewer } from './waypoints';
  import { GscWaypoints } from '@libs/waypoints';

  const POINTS_OF_INTEREST_URL = '/logbook/poi.kml';

  function AddPointsOfInterest(viewer: Cesium.Viewer) {
    // Initialize points of interest
    Cesium.KmlDataSource.load(POINTS_OF_INTEREST_URL, {
      camera: viewer.scene.camera,
      canvas: viewer.scene.canvas,
    }).then((dataSource) => {
      dataSource.entities.values.forEach((entity) => {
        if (entity.label) {
          (entity.label as any).fillColor = Cesium.Color.BLACK;
          (entity.label as any).outlineColor = Cesium.Color.WHITE;
          (entity.label as any).outlineWidth = 3;
        } 
        if (entity.billboard) {
          (entity.billboard as any).heightReference =
            Cesium.HeightReference.CLAMP_TO_GROUND;
          (entity.billboard as any).verticalOrigin = Cesium.VerticalOrigin.BOTTOM;
        }
        viewer.entities.add(entity);
      });
    });
  }

  // @ts-ignore
  Cesium.Ion.defaultAccessToken =
    'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiJmNDVkNGE4Zi1lM2I3LTRjMGQtOGQ3My00MWVhYzIyMjJiNzQiLCJpZCI6MjYyMzUyLCJpYXQiOjE3MzQxMjU5MTd9.0fxkbEutErEMWN1LJfkdgVsBGxPp8JKnK3MWtvFi_yE';
  console.log(Cesium.Ion.defaultAccessToken);

  // Extract flightId from the div with cesiumContainer
  const flightUrl = document
    .getElementById('cesiumContainer')
    ?.getAttribute('igc-url');

  function initializeViewer(igcFileContents: string) {
    console.log('Initializing viewer');
    const igc = IGCParser.parse(igcFileContents);

    // Load the terrain, on load adding waypoints and igc viewers
    const terrain = Cesium.Terrain.fromWorldTerrain();
    const viewer = new Cesium.Viewer('cesiumContainer', {
      infoBox: true,
      sceneModePicker: true,
      terrain: terrain,
      geocoder: Cesium.IonGeocodeProviderType.BING,
    });
    terrain.readyEvent.addEventListener(async () => {
      console.log('Terrain loaded');
      console.log('Adding IGC to viewer');
      const { pilotEntity } = await addIgcToViewer(viewer, igc, terrain.provider).finally();
      viewer.trackedEntity = pilotEntity;

      // Add the waypoints
      console.log('Adding waypoints to viewer');
      const waypoints = GscWaypoints(igcFileContents, igc);
      addWaypointsToViewer(viewer, waypoints);

      // Add points of interest
      console.log('Adding points of interest to viewer');
      AddPointsOfInterest(viewer);
    });

    // Setup the viewer bound to the IGC file's time
    const startTime = Cesium.JulianDate.fromIso8601(
      new Date(igc.fixes[0].timestamp).toISOString()
    );
    const stopTime = Cesium.JulianDate.fromIso8601(
      new Date(igc.fixes[igc.fixes.length - 1].timestamp).toISOString()
    );
    viewer.clock.startTime = startTime.clone();
    viewer.clock.stopTime = stopTime.clone();
    viewer.clock.clockRange = Cesium.ClockRange.CLAMPED;
    viewer.clock.currentTime = startTime.clone();
    viewer.clock.shouldAnimate = true;
    viewer.timeline.zoomTo(startTime.clone(), stopTime.clone());

    console.log('Viewer initialized');
  }

  // Initialize from flight
  if (flightUrl) {
    console.log('Fetching URL', flightUrl);

    axios.get(flightUrl).then((response) => {
      // Parse the IGC file
      console.log('IGC File Downloaded');
      initializeViewer(response.data);
    });
  }
</script>

<style is:global>
  html,
  body,
  #cesiumContainer {
    height: 100%;
    width: 100%;
  }
</style>
