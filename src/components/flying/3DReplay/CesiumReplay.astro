---
// About:  CesiumJS 3D Flight Replay

type Props = {
  flight: Flight;
};

const { flight } = Astro.props;

import type { Flight } from '@libs/flying';
import 'cesium/Build/Cesium/Widgets/widgets.css';
---

<div
  id="cesiumContainer"
  igc-url={flight.igcFile?.filePathUrl}
  class="flex h-full w-full"
>
</div>

<script>
  import axios from 'axios';
  import * as Cesium from 'cesium';
  import IGCParser from 'igc-parser';

  // @ts-ignore
  window.CESIUM_BASE_URL = '/cesiumStatic';
  Cesium.Ion.defaultAccessToken =
    'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiJmNDVkNGE4Zi1lM2I3LTRjMGQtOGQ3My00MWVhYzIyMjJiNzQiLCJpZCI6MjYyMzUyLCJpYXQiOjE3MzQxMjU5MTd9.0fxkbEutErEMWN1LJfkdgVsBGxPp8JKnK3MWtvFi_yE';
  console.log(Cesium.Ion.defaultAccessToken);

  const terrainProvider = Cesium.Terrain.fromWorldTerrain();
  const viewer = new Cesium.Viewer('cesiumContainer', {
    infoBox: true,
    sceneModePicker: true,
    terrain: terrainProvider,
  });

  // Extract flightId from the div with cesiumContainer
  const flightUrl = document
    .getElementById('cesiumContainer')
    ?.getAttribute('igc-url');

  function initializeViewer(viewer: Cesium.Viewer, igc: IGCParser.IGCFile) {
    console.log('Initializing viewer');

    // Zoom to the first flight fix
    viewer.camera.setView({
      destination: Cesium.Cartesian3.fromDegrees(
        igc.fixes[0].longitude,
        igc.fixes[0].latitude,
        10
      ),
    });

    // Setup the viewer bound to the IGC file's time
    const startTime = Cesium.JulianDate.fromIso8601(
      new Date(igc.fixes[0].timestamp).toISOString()
    );
    const stopTime = Cesium.JulianDate.fromIso8601(
      new Date(igc.fixes[igc.fixes.length - 1].timestamp).toISOString()
    );
    viewer.clock.startTime = startTime.clone();
    viewer.clock.stopTime = stopTime.clone();
    viewer.clock.clockRange = Cesium.ClockRange.CLAMPED;
    viewer.clock.currentTime = startTime.clone();
    viewer.clock.shouldAnimate = true;
    viewer.timeline.zoomTo(startTime.clone(), stopTime.clone());

    const trackFlight = (offsetBy: number) => {
      // Add the flight track
      const flightTrack = new Cesium.SampledPositionProperty();
      igc.fixes.forEach((fix) => {
        flightTrack.addSample(
          Cesium.JulianDate.fromDate(new Date(fix.timestamp)),
          Cesium.Cartesian3.fromDegrees(
            fix.longitude,
            fix.latitude,
            (fix.gpsAltitude ?? 0) + offsetBy
          )
        );
      });

      const flightEntity = viewer.entities.add({
        name: 'Flight Track',
        position: flightTrack,
        path: {
          resolution: 1,
          width: 1,
          trailTime: 120,
          leadTime: 0,
          material: new Cesium.PolylineGlowMaterialProperty({
            glowPower: 0.25,
            color: Cesium.Color.WHEAT,
          }),
        },
      });

      // STEP 4 CODE (green circle entity)
      // Create an entity to both visualize the entire radar sample series with a line and add a point that moves along the samples.
      const airplaneEntity = viewer.entities.add({
        availability: new Cesium.TimeIntervalCollection([
          new Cesium.TimeInterval({
            start: startTime.clone(),
            stop: stopTime.clone(),
          }),
        ]),
        position: flightTrack,
        point: { pixelSize: 1, color: Cesium.Color.GREEN },
        // path: new Cesium.PathGraphics({ width: 3 }),
      });
      // Make the camera track this moving entity.
      viewer.trackedEntity = airplaneEntity;

      console.log('Viewer initialized Finished', viewer.trackedEntity);
    };

    terrainProvider.readyEvent.addEventListener(() => {
      Cesium.sampleTerrainMostDetailed(terrainProvider.provider, [
        Cesium.Cartographic.fromDegrees(
          igc.fixes[0].longitude,
          igc.fixes[0].latitude
        ),
      ]).then((result) => {
        console.log('Sampled Terrain Height', result[0].height);
        console.log('Tracklog Height: ', igc.fixes[0].gpsAltitude);

        const offset = result[0].height - igc.fixes[0].gpsAltitude;
        console.log('Offset: ', offset);
        trackFlight(offset);
      });
    });
  }

  // Initialize from flight
  if (flightUrl) {
    console.log('Fetching URL', flightUrl);

    axios.get(flightUrl).then((response) => {
      // Parse the IGC file
      const igc = IGCParser.parse(response.data);
      initializeViewer(viewer, igc);
    });
  }
</script>

<style is:global>
  html,
  body,
  #cesiumContainer {
    height: 100%;
    width: 100%;
  }
</style>
