---
// About:  CesiumJS 3D Flight Replay

type Props = {
  flight: Flight;
};

const { flight } = Astro.props;

import type { Flight } from '@libs/flying';
import 'cesium/Build/Cesium/Widgets/widgets.css';
---

<div id="cesiumContainer" igc-url={flight.igcFile?.filePathUrl}></div>

<script>
  import axios from 'axios';
  import * as Cesium from 'cesium';
  import IGCParser from 'igc-parser';

  // @ts-ignore
  window.CESIUM_BASE_URL = '/cesiumStatic';
  Cesium.Ion.defaultAccessToken =
    'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiJmNDVkNGE4Zi1lM2I3LTRjMGQtOGQ3My00MWVhYzIyMjJiNzQiLCJpZCI6MjYyMzUyLCJpYXQiOjE3MzQxMjU5MTd9.0fxkbEutErEMWN1LJfkdgVsBGxPp8JKnK3MWtvFi_yE';
  console.log(Cesium.Ion.defaultAccessToken);

  const viewer = new Cesium.Viewer('cesiumContainer', {
    infoBox: false,
    shouldAnimate: true,
    animation: true,
    // terrain: Cesium.Terrain.fromWorldTerrain(),
  });

  // const camera = new Cesium.Camera(viewer.scene);

  // Extract flightId from the div with cesiumContainer
  const flightUrl = document
    .getElementById('cesiumContainer')
    ?.getAttribute('igc-url');

  function initializeViewer(viewer: Cesium.Viewer, igc: IGCParser.IGCFile) {
    console.log('Initializing viewer');

    // Setup the viewer bound to the IGC file's time
    const startTime = Cesium.JulianDate.fromIso8601(
      new Date(igc.fixes[0].timestamp).toISOString()
    );
    const stopTime = Cesium.JulianDate.fromIso8601(
      new Date(igc.fixes[igc.fixes.length - 1].timestamp).toISOString()
    );
    viewer.clock.startTime = startTime.clone();
    viewer.clock.stopTime = stopTime.clone();
    viewer.clock.clockRange = Cesium.ClockRange.CLAMPED;
    viewer.clock.currentTime = startTime.clone();
    viewer.clock.shouldAnimate = true;
    viewer.timeline.zoomTo(startTime.clone(), stopTime.clone());

    // Add the flight track
    const flightTrack = new Cesium.SampledPositionProperty();
    igc.fixes.forEach((fix) => {
      flightTrack.addSample(
        Cesium.JulianDate.fromDate(new Date(fix.timestamp)),
        Cesium.Cartesian3.fromDegrees(
          fix.longitude,
          fix.latitude,
          fix.gpsAltitude ?? 0
        )
      );
    });

    // Interpolate the flight track to make it smoother
    // The interpolation algorithm is LinearApproximation which will
    // create a line that is closest to the sampled positions
    // The interpolation degree is 1, which will create a simple line
    // between each pair of points
    // I wonder if this is needed???
    flightTrack.setInterpolationOptions({
      interpolationDegree: 1,
      interpolationAlgorithm: Cesium.LinearApproximation,
    });

    const flightEntity = viewer.entities.add({
      name: 'Flight Track',
      position: flightTrack,
      path: {
        resolution: 1,
        width: 1,
        trailTime: 120,
        leadTime: 0,
        material: new Cesium.PolylineGlowMaterialProperty({
          glowPower: 0.25,
          color: Cesium.Color.WHEAT,
        }),
      },
      availability: new Cesium.TimeIntervalCollection([
        new Cesium.TimeInterval({
          start: startTime.clone(),
          stop: stopTime.clone(),
        }),
      ]),
      // viewFrom: new Cesium.Cartesian3(100, 0, 90),
    });

    const track = () => {
      viewer.trackedEntity = flightEntity;
      // viewer.flyTo(viewer.entities.values[0]);
      // viewer.camera.lookAt(flightEntity.position, new Cesium.HeadingPitchRoll());
      // console.log("Zoom zoom", flightEntity);
      setTimeout(track, 1000);
    };

    setTimeout(track, 5000); // Start the track();

    // setTimeout(() => {
    //   console.log('Flight entity position', flightEntity.position);
    //   viewer.selectedEntity = flightEntity;
    //   viewer.trackedEntity = flightEntity;
    // }, 1000);
    // viewer.camera.lookAt(flightEntity.position, new Cesium.HeadingPitchRoll());

    console.log('Viewer initialized Finished', viewer.trackedEntity);
  }

  // Initialize from flight
  if (flightUrl) {
    console.log('Fetching URL', flightUrl);

    axios.get(flightUrl).then((response) => {
      // Parse the IGC file
      const igc = IGCParser.parse(response.data);
      initializeViewer(viewer, igc);
    });
  }
</script>
