---
import Layout from '../layouts/DataLayout.astro';
import Article from '../components/data/Article.astro';

import hero from '../../public/climbing.jpg';
import Calendar from '@components/climbing/Calendar.tsx';
import { GetClimbs } from '@libs/Climbing';
import '@fontsource/capriola/latin-400.css';

const climbs = await GetClimbs();
import CalendarDayHighlight from '@components/climbing/calendarDayHighlight.tsx';

import { ResponsiveLine } from '@nivo/line';

// Climbs by day
const climbsByDay = climbs.reduce(
  (accumulator: { day: string; value: number }[], climb) => {
    // Extract date from the current climb object
    const { date } = climb;

    // Check if an entry for this date already exists in the accumulator
    const existingEntry = accumulator.find((entry) => entry.day === date);

    if (existingEntry) {
      // If an entry exists, increment its value
      existingEntry.value += 1;
    } else {
      // If no entry exists, create a new one with value 1
      accumulator.push({ day: date, value: 1 });
    }

    return accumulator;
  },
  []
);

// Climbs by month
// const _climbsByMonth = climbs.reduce(
//(accumulator: { month: string; value: number }[], climb) => {

// Days climbed per month
const daysClimbedPerMonth = climbs
  .reduce((accumulator: { month: string; days: Set<number> }[], climb) => {
    // Extract date from the current climb object
    const { date } = climb;

    // Parse the date and extract the year, month, and day
    const climbDate = new Date(date);
    const year = climbDate.getFullYear();
    const month = climbDate.getMonth() + 1; // month is zero-indexed
    const day = climbDate.getDate();

    // Create a month key in the format "YYYY-MM"
    const monthKey = `${year}-${String(month).padStart(2, '0')}`;

    // Find or create the entry for this month
    let entry = accumulator.find((entry) => entry.month === monthKey);
    if (!entry) {
      entry = { month: monthKey, days: new Set() };
      accumulator.push(entry);
    }

    // Add the day to the set of days for this month
    entry.days.add(day);

    return accumulator;
  }, [])
  .map((entry) => ({
    month: entry.month,
    daysClimbed: entry.days.size,
  }))
  .reverse();

const climbsByMonth = [
  {
    id: 'Climbing',
    data: daysClimbedPerMonth.map((c) => ({ x: c.month, y: c.daysClimbed })),
  },
];

const monthlyClimbsByGrade = Object.entries(
  climbs.reduce(
    (accumulator: { [month: string]: { [level: string]: number } }, climb) => {
      // Parse the date and extract the year, month, and day
      const climbDate = new Date(climb.date);
      const year = climbDate.getFullYear();
      const month = climbDate.getMonth() + 1; // month is zero-indexed
      const day = climbDate.getDate();

      // Create a month key in the format "YYYY-MM"
      const monthKey = `${year}-${String(month).padStart(2, '0')}`;

      if (!(climb.rating in accumulator)) {
        accumulator[climb.rating] = {};
      }
      if (!(monthKey in accumulator[climb.rating])) {
        accumulator[climb.rating][monthKey] = 0;
      }
      accumulator[climb.rating][monthKey] += 1;

      return accumulator;
    },
    {}
  )
).map(([grade, monthKey]) => ({
  id: grade,
  data: Object.entries(monthKey).map(([month, climbs]) => ({
    x: month,
    y: climbs,
  })),
}));
---

<Layout
  title="Climbing Data"
  hero={hero}
  description="A track of my climbing progress"
>
  <Article title="Ethos">
    <p>
      For me, I find that when we start a new sport or hobby, it's very easy to
      feel like we're not progressing, or that we're hitting a plateau. Just
      like with anything, having the data available will help figure out if this
      is actually the case, or better explain why. With so many hobbies, and
      often work competing for time, keeping track of this is done on a best
      effort basis using a <a
        href="https://docs.google.com/spreadsheets/d/1-0OIGspu_3g_SsTvc_D6nc80I7PzXjUFz6QdnQ2-dnc/edit?usp=sharing"
        target="_blank">Google Spreadsheet</a
      >
    </p>
    <p>
      I'm very much a "casual climber", without any real goals in mind. I do
      however, get a kick when I get to climb some place new, or achieve a new
      level I've not done before
    </p>
    <p>
      I was getting pretty lazy updating my spreadsheet towards the end of 2024.
      Hopefully I'll do a better job of it going into 2025!
    </p>
  </Article>

  <Article title="Days With Climing">
    <p>
      My goal is to exercise 2 times a week. Ideally, one of these should be
      climbing!
    </p>
    <p>
      Some interesting stats here is that most of the climbs occur on a
      <CalendarDayHighlight
        client:idle
        instanceKey="perday"
        day="Tuesday"
        from="2023-01-01"
        to="2025-01-01"
        className="text-orange-600 font-bold text-base italic font-[capriola]"
      /> or
      <CalendarDayHighlight
        client:idle
        instanceKey="perday"
        day="Thursday"
        from="2023-01-01"
        to="2025-01-01"
        className="text-orange-600 font-bold text-base italic font-[capriola]"
      />
    </p>
    <p>
      I'm a little concerned that I've been lazy as 2024 has progressed with
      logging these climbs, so, will try to endavor to get much better at this
    </p>
    <div class="h-[250px]" slot="data">
      <Calendar
        client:only="react"
        data={climbsByDay}
        from="2023-01-02"
        to="2025-01-01"
        minValue={0}
        maxValue={15}
        storeName="perday"
      />
    </div>
  </Article>
  <Article>
    <p>
      As for the amount of climbing I'm doing. Another way of looking at this is
      <strong>"Days climbed per month"</strong>
    </p>
  </Article>
  <div class="h-36 m-auto max-w-[70ch]">
    <ResponsiveLine
      client:only="react"
      data={climbsByMonth}
      margin={{ top: 10, right: 10, bottom: 50, left: 60 }}
      xScale={{ type: 'point' }}
      yScale={{
        type: 'linear',
        min: 'auto',
        max: 'auto',
        stacked: true,
        reverse: false,
      }}
      yFormat=" >-.2f"
      axisTop={null}
      axisRight={null}
      axisBottom={{
        tickSize: 2,
        tickPadding: 5,
        tickRotation: -45,
        // legend: 'Month',
        legendOffset: 50,
        legendPosition: 'middle',
        truncateTickAt: 0,
      }}
      axisLeft={{
        tickSize: 5,
        tickPadding: 5,
        tickRotation: 0,
        legend: 'Days p/Month',
        legendOffset: -40,
        legendPosition: 'middle',
        truncateTickAt: 0,
      }}
      pointSize={10}
      pointColor={{ theme: 'background' }}
      pointBorderWidth={2}
      pointBorderColor={{ from: 'serieColor' }}
      pointLabel="data.yFormatted"
      pointLabelYOffset={-12}
      enableTouchCrosshair={true}
      useMesh={true}
      }
    />
  </div>

  <Article title="Climbs Per Month (Climbing Difficulty)">
    <p>
      This is one of the more interesting graphs. I'm not going to the gym more
      often than I was, but, am I climbing more things while I'm there, or, has
      my climbing grades <i>improving?</i>
    </p>
    <p>
      Perhaps one way to look at this is focusing on my challenges, the Hard
      Boulders, or my Project Climbs?
    </p>
    <div class="h-96 m-auto" slot="data-big">
      <ResponsiveLine
        client:only="react"
        animate
        curve="monotoneX"
        data={monthlyClimbsByGrade}
        enableSlices="x"
        enableTouchCrosshair
        legends={[
          {
            anchor: 'bottom-right',
            direction: 'column',
            justify: false,
            translateX: 100,
            translateY: 0,
            itemsSpacing: 0,
            itemDirection: 'left-to-right',
            itemWidth: 80,
            itemHeight: 20,
            itemOpacity: 0.75,
            symbolSize: 12,
            toggleSerie: true,
            symbolShape: 'circle',
            symbolBorderColor: 'rgba(0, 0, 0, .5)',
            effects: [
              {
                on: 'hover',
                style: {
                  itemBackground: 'rgba(0, 0, 0, .03)',
                  itemOpacity: 1,
                },
              },
            ],
          },
        ]}
        margin={{
          bottom: 60,
          left: 80,
          right: 100,
          top: 20,
        }}
        yScale={{
          stacked: false,
          type: 'linear',
        }}
      />
    </div>
  </Article>
</Layout>
<!-- margin={{ top: 10, right: 100, bottom: 80, left: 60 }} -->
